// Code generated by vfsgen; DO NOT EDIT.

package pkg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 1, 21, 1, 28, 2, 281349257, time.UTC),
		},
		"/faas-containerd.service": &vfsgen۰CompressedFileInfo{
			name:             "faas-containerd.service",
			modTime:          time.Date(2020, 1, 21, 1, 27, 57, 145110136, time.UTC),
			uncompressedSize: 314,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xb1\x6a\xc3\x40\x0c\xc6\xf1\x5d\x4f\x51\xb2\x3b\x4e\x87\x8e\xb7\xb4\xc9\x50\x68\xa0\xc4\x94\x0c\x21\x04\xe5\xac\x24\xa2\x77\x3a\xa3\xd3\xb9\x35\xc1\xef\x5e\x6c\x28\xa5\xeb\xef\x43\xe8\x7f\xf8\x10\xb6\x23\xac\x29\x7b\xe5\xce\x38\x89\xbb\x20\xe6\xb6\xf2\x49\x0c\x59\x48\x5b\x80\x43\x43\xda\xb3\xa7\x23\x6c\x29\x26\x1d\xde\x38\xb2\xb9\xa7\xd5\x6a\x0b\x1b\xe9\x59\x93\x44\x12\x73\x8b\x4c\x5e\xc9\x4e\x31\x15\xb1\x53\x87\x76\x73\xf7\xfb\xb2\x99\x71\x3b\xd9\x3b\xda\x6d\x1c\x17\xff\x8f\xce\x98\xd9\x9f\xb0\xd8\xcd\x99\x16\x5a\xc0\xe6\x9b\x7c\x63\xa8\xe6\xea\x92\xb5\x0e\xc9\x63\xa8\xcf\x2c\xf5\x1c\xf6\x90\xa7\xa9\xea\x34\xf5\xdc\x92\xc2\x8e\x66\x70\x49\xaa\x0b\x72\x28\x4a\xbf\xd4\x90\x77\x8f\xab\x0c\xfb\xa4\x9f\x2c\xd7\x35\x2b\x79\x4b\x3a\x4c\x51\x2f\x5f\xed\x38\xc2\xae\x88\x71\xa4\xbf\x65\xfe\x00\x70\x78\x95\x6c\x18\xc2\x11\xf6\x28\x46\xed\xf3\xe0\x62\x09\xc6\x55\xc9\xa4\x4b\x43\xbd\x92\xc1\x4f\x00\x00\x00\xff\xff\x96\x71\x01\x19\x3a\x01\x00\x00"),
		},
		"/faasd.service": &vfsgen۰CompressedFileInfo{
			name:             "faasd.service",
			modTime:          time.Date(2020, 1, 21, 1, 28, 0, 719237454, time.UTC),
			uncompressedSize: 238,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xbf\x4a\x03\x41\x10\x87\xfb\x79\x0a\x5f\xe0\xfe\x58\x58\x6e\xa1\xc6\x42\x30\x4d\x0e\x49\x71\x5c\x31\xee\xcd\x85\xc1\xdd\xd9\x30\x33\xab\x1e\x21\xef\x2e\x5c\x10\xbb\x8f\xdf\x07\x3f\xbe\xf1\x5d\xd8\x27\xd8\x91\x45\xe5\xb3\x73\x91\xb0\x20\xda\x0c\x8f\x8b\x93\x6e\xdc\xc4\x22\x8e\x2c\xa4\x73\x6b\xa4\x5f\x1c\x09\x60\x1c\x6e\x34\xc1\x9e\x72\xd1\xf5\x8d\x33\x7b\x78\xe8\xfb\x3d\xbc\xfc\x50\x1c\x1c\xd5\x43\x57\x4d\xbb\x54\x22\xa6\xee\x83\xa5\xdb\x8e\xef\xea\x19\x0e\x64\x9b\x2f\xd2\x2c\xc8\xa9\x2a\xfd\x4d\x03\xc5\x70\xdf\x1b\x1c\x8b\x7e\xb2\x9c\x76\xac\x14\xbd\xe8\x1a\x2e\x97\xf6\xf9\x7b\xbe\x5e\xe1\x50\xc5\x39\xd3\xbf\xb9\xe5\xc2\xf8\x2a\xe6\x98\xd2\x04\x47\x14\xa7\xf9\x69\x0d\xb9\x26\xe7\xa6\x1a\x69\xeb\xa8\x27\x72\xf8\x0d\x00\x00\xff\xff\x29\xa5\x06\x23\xee\x00\x00\x00"),
		},
		"/prometheus.yml": &vfsgen۰CompressedFileInfo{
			name:             "prometheus.yml",
			modTime:          time.Date(2020, 1, 21, 1, 27, 28, 305037594, time.UTC),
			uncompressedSize: 828,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4f\x6b\xdc\x30\x10\xc5\xef\xfa\x14\x8f\xf8\xe0\xf6\xb0\x66\xb7\x25\x90\xf8\x56\x68\xa1\x87\x1e\x0a\xed\xad\x04\x33\x91\xc7\x5e\x15\x59\xb3\x48\xe3\x6d\xfd\xed\x8b\xfc\xa7\x38\x21\x84\xe8\x36\xff\xde\xbc\xf9\xa9\xc0\x30\xa1\xf7\xf2\x48\x1e\x56\x42\xe7\x7a\xb3\x44\xb5\x01\x92\x8d\x74\xe1\xc6\x05\xe5\x78\x25\x5f\x23\xbf\xd3\x6d\x42\x81\x1f\xac\xd0\x33\xaf\x2d\xd8\x5a\xa0\x02\xbe\x72\x9c\x70\xba\x45\x62\x2b\xa1\x4d\x15\x3e\x73\x47\xa3\x57\xb8\xb4\x15\x31\xb8\x30\x2a\x57\x06\xe0\x2b\xf9\x91\xd4\x49\xd8\x2d\x5a\x96\x7c\x59\x4a\x8c\x38\x7a\x4e\x2f\x08\xff\x3c\x33\xda\xd7\xc4\x8b\xed\x06\x75\x03\xcb\x38\x77\xa5\x6c\x5d\x66\xf7\xeb\xe1\x9b\xc4\xbb\xd3\x31\xbd\xaf\x8c\x29\xf0\xc9\x73\xd4\x81\x02\xf5\x1c\x57\x2e\x63\x9c\x4d\x1a\xca\x25\x17\xfa\x0c\x88\x76\x6d\x29\x27\x0e\x48\x4a\xea\x6c\xb3\xcc\xcc\xb9\x9c\x55\x8a\x3d\xeb\x1a\x66\x5b\x87\x27\xb3\xf5\xfd\xf1\xfe\x63\xde\xfb\x4d\xa8\x5d\xaf\x95\x60\x19\x14\x5a\x5c\x38\x3a\x69\x9d\x25\xef\xa7\x8d\x16\x67\xfb\x03\xc8\x5a\x89\xad\x0b\xfd\xb3\x83\xca\x17\xa0\x96\x95\xc9\xc2\x4d\xe7\x3c\xcf\x46\xb2\x89\x9b\xce\xc5\xa4\xcd\xbc\xb1\x9a\x06\x7f\xb3\xe5\x17\xc4\xfb\x42\xa6\xb2\x7d\xf7\x13\x22\x39\x52\x72\x21\xdb\xe0\xbf\x64\xd5\x4f\x90\xc0\xe0\xd0\x5e\xc4\x85\x19\xf6\x32\x57\x9b\x02\x5f\x39\x32\x9c\x96\x09\xdf\xa3\x0c\xac\x67\x1e\x13\x9c\x26\xf6\x5d\x65\xd6\xcf\xda\xc1\x3b\xe0\xb7\x3c\x36\x81\x06\xae\x51\x5e\xfe\x4f\x94\x33\xc8\xd7\x59\xe3\x57\xe9\xc5\x92\x3f\x4b\xd2\x0c\xf8\x58\x3e\x98\xe7\x8a\x3d\x29\xff\xa1\xe9\x8d\x72\x6b\x77\x7d\x77\xbc\xfb\x50\x3e\x98\x7f\x01\x00\x00\xff\xff\xd0\xae\x6d\xe6\x3c\x03\x00\x00"),
		},
		"/resolv.conf": &vfsgen۰FileInfo{
			name:    "resolv.conf",
			modTime: time.Date(2020, 1, 21, 1, 27, 44, 399520206, time.UTC),
			content: []byte("\x6e\x61\x6d\x65\x73\x65\x72\x76\x65\x72\x20\x38\x2e\x38\x2e\x38\x2e\x38"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/faas-containerd.service"].(os.FileInfo),
		fs["/faasd.service"].(os.FileInfo),
		fs["/prometheus.yml"].(os.FileInfo),
		fs["/resolv.conf"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
